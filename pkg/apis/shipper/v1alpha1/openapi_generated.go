// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.AchievedStep":                                   schema_pkg_apis_shipper_v1alpha1_AchievedStep(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.Application":                                    schema_pkg_apis_shipper_v1alpha1_Application(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ApplicationCondition":                           schema_pkg_apis_shipper_v1alpha1_ApplicationCondition(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ApplicationList":                                schema_pkg_apis_shipper_v1alpha1_ApplicationList(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ApplicationSpec":                                schema_pkg_apis_shipper_v1alpha1_ApplicationSpec(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ApplicationStatus":                              schema_pkg_apis_shipper_v1alpha1_ApplicationStatus(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.CapacityTarget":                                 schema_pkg_apis_shipper_v1alpha1_CapacityTarget(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.CapacityTargetList":                             schema_pkg_apis_shipper_v1alpha1_CapacityTargetList(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.CapacityTargetSpec":                             schema_pkg_apis_shipper_v1alpha1_CapacityTargetSpec(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.CapacityTargetStatus":                           schema_pkg_apis_shipper_v1alpha1_CapacityTargetStatus(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.Chart":                                          schema_pkg_apis_shipper_v1alpha1_Chart(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.Cluster":                                        schema_pkg_apis_shipper_v1alpha1_Cluster(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterCapacityCondition":                       schema_pkg_apis_shipper_v1alpha1_ClusterCapacityCondition(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterCapacityReport":                          schema_pkg_apis_shipper_v1alpha1_ClusterCapacityReport(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterCapacityReportBreakdown":                 schema_pkg_apis_shipper_v1alpha1_ClusterCapacityReportBreakdown(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterCapacityReportContainerBreakdown":        schema_pkg_apis_shipper_v1alpha1_ClusterCapacityReportContainerBreakdown(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterCapacityReportContainerBreakdownExample": schema_pkg_apis_shipper_v1alpha1_ClusterCapacityReportContainerBreakdownExample(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterCapacityReportContainerStateBreakdown":   schema_pkg_apis_shipper_v1alpha1_ClusterCapacityReportContainerStateBreakdown(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterCapacityReportOwner":                     schema_pkg_apis_shipper_v1alpha1_ClusterCapacityReportOwner(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterCapacityStatus":                          schema_pkg_apis_shipper_v1alpha1_ClusterCapacityStatus(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterCapacityTarget":                          schema_pkg_apis_shipper_v1alpha1_ClusterCapacityTarget(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterInstallationCondition":                   schema_pkg_apis_shipper_v1alpha1_ClusterInstallationCondition(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterInstallationStatus":                      schema_pkg_apis_shipper_v1alpha1_ClusterInstallationStatus(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterList":                                    schema_pkg_apis_shipper_v1alpha1_ClusterList(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterRequirements":                            schema_pkg_apis_shipper_v1alpha1_ClusterRequirements(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterSchedulerSettings":                       schema_pkg_apis_shipper_v1alpha1_ClusterSchedulerSettings(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterSpec":                                    schema_pkg_apis_shipper_v1alpha1_ClusterSpec(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterStatus":                                  schema_pkg_apis_shipper_v1alpha1_ClusterStatus(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterTrafficCondition":                        schema_pkg_apis_shipper_v1alpha1_ClusterTrafficCondition(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterTrafficStatus":                           schema_pkg_apis_shipper_v1alpha1_ClusterTrafficStatus(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterTrafficTarget":                           schema_pkg_apis_shipper_v1alpha1_ClusterTrafficTarget(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.InstallationTarget":                             schema_pkg_apis_shipper_v1alpha1_InstallationTarget(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.InstallationTargetList":                         schema_pkg_apis_shipper_v1alpha1_InstallationTargetList(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.InstallationTargetSpec":                         schema_pkg_apis_shipper_v1alpha1_InstallationTargetSpec(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.InstallationTargetStatus":                       schema_pkg_apis_shipper_v1alpha1_InstallationTargetStatus(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.PodStatus":                                      schema_pkg_apis_shipper_v1alpha1_PodStatus(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.RegionRequirement":                              schema_pkg_apis_shipper_v1alpha1_RegionRequirement(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.Release":                                        schema_pkg_apis_shipper_v1alpha1_Release(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ReleaseCondition":                               schema_pkg_apis_shipper_v1alpha1_ReleaseCondition(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ReleaseEnvironment":                             schema_pkg_apis_shipper_v1alpha1_ReleaseEnvironment(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ReleaseList":                                    schema_pkg_apis_shipper_v1alpha1_ReleaseList(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ReleaseSpec":                                    schema_pkg_apis_shipper_v1alpha1_ReleaseSpec(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ReleaseStatus":                                  schema_pkg_apis_shipper_v1alpha1_ReleaseStatus(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ReleaseStrategyCondition":                       schema_pkg_apis_shipper_v1alpha1_ReleaseStrategyCondition(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ReleaseStrategyState":                           schema_pkg_apis_shipper_v1alpha1_ReleaseStrategyState(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ReleaseStrategyStatus":                          schema_pkg_apis_shipper_v1alpha1_ReleaseStrategyStatus(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.RolloutBlock":                                   schema_pkg_apis_shipper_v1alpha1_RolloutBlock(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.RolloutBlockAuthor":                             schema_pkg_apis_shipper_v1alpha1_RolloutBlockAuthor(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.RolloutBlockList":                               schema_pkg_apis_shipper_v1alpha1_RolloutBlockList(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.RolloutBlockOverrides":                          schema_pkg_apis_shipper_v1alpha1_RolloutBlockOverrides(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.RolloutBlockSpec":                               schema_pkg_apis_shipper_v1alpha1_RolloutBlockSpec(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.RolloutBlockStatus":                             schema_pkg_apis_shipper_v1alpha1_RolloutBlockStatus(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.RolloutStrategy":                                schema_pkg_apis_shipper_v1alpha1_RolloutStrategy(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.RolloutStrategyStep":                            schema_pkg_apis_shipper_v1alpha1_RolloutStrategyStep(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.RolloutStrategyStepValue":                       schema_pkg_apis_shipper_v1alpha1_RolloutStrategyStepValue(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.TrafficTarget":                                  schema_pkg_apis_shipper_v1alpha1_TrafficTarget(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.TrafficTargetList":                              schema_pkg_apis_shipper_v1alpha1_TrafficTargetList(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.TrafficTargetSpec":                              schema_pkg_apis_shipper_v1alpha1_TrafficTargetSpec(ref),
		"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.TrafficTargetStatus":                            schema_pkg_apis_shipper_v1alpha1_TrafficTargetStatus(ref),
	}
}

func schema_pkg_apis_shipper_v1alpha1_AchievedStep(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"step": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"step", "name"},
			},
		},
	}
}

func schema_pkg_apis_shipper_v1alpha1_Application(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Application describes a deployable application",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ApplicationSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Most recently observed status of the application",
							Ref:         ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ApplicationStatus"),
						},
					},
				},
				Required: []string{"spec", "status"},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ApplicationSpec", "github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ApplicationStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_ApplicationCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_ApplicationList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ApplicationList is a list of Applications. Mostly only useful for admins: regular users interact with exactly one Application at once",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.Application"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.Application", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_ApplicationSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"revisionHistoryLimit": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"template": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ReleaseEnvironment"),
						},
					},
				},
				Required: []string{"revisionHistoryLimit", "template"},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ReleaseEnvironment"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_ApplicationStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ApplicationCondition"),
									},
								},
							},
						},
					},
					"history": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ApplicationCondition"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_CapacityTarget(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "A CapacityTarget defines the goal state for # of pods for incumbent and contender versions. This is used by the StrategyController to change the state of the cluster to satisfy a single step of a Strategy.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.CapacityTargetSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.CapacityTargetStatus"),
						},
					},
				},
				Required: []string{"spec"},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.CapacityTargetSpec", "github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.CapacityTargetStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_CapacityTargetList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.CapacityTarget"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.CapacityTarget", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_CapacityTargetSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"clusters": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterCapacityTarget"),
									},
								},
							},
						},
					},
				},
				Required: []string{"clusters"},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterCapacityTarget"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_CapacityTargetStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"clusters": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterCapacityStatus"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterCapacityStatus"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_Chart(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"repoUrl": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"name", "version", "repoUrl"},
			},
		},
	}
}

func schema_pkg_apis_shipper_v1alpha1_Cluster(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "An Cluster is a cluster we're deploying to.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Most recently observed status of the order / +optional",
							Ref:         ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterStatus"),
						},
					},
				},
				Required: []string{"spec", "status"},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterSpec", "github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_ClusterCapacityCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_ClusterCapacityReport(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"owner": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterCapacityReportOwner"),
						},
					},
					"breakdown": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterCapacityReportBreakdown"),
									},
								},
							},
						},
					},
				},
				Required: []string{"owner"},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterCapacityReportBreakdown", "github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterCapacityReportOwner"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_ClusterCapacityReportBreakdown(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"containers": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterCapacityReportContainerBreakdown"),
									},
								},
							},
						},
					},
					"count": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int64",
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"count", "status", "type"},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterCapacityReportContainerBreakdown"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_ClusterCapacityReportContainerBreakdown(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"states": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterCapacityReportContainerStateBreakdown"),
									},
								},
							},
						},
					},
				},
				Required: []string{"name", "states"},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterCapacityReportContainerStateBreakdown"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_ClusterCapacityReportContainerBreakdownExample(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"pod": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"pod"},
			},
		},
	}
}

func schema_pkg_apis_shipper_v1alpha1_ClusterCapacityReportContainerStateBreakdown(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"count": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int64",
						},
					},
					"example": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterCapacityReportContainerBreakdownExample"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"count", "example", "type"},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterCapacityReportContainerBreakdownExample"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_ClusterCapacityReportOwner(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"name"},
			},
		},
	}
}

func schema_pkg_apis_shipper_v1alpha1_ClusterCapacityStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"availableReplicas": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"achievedPercent": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"sadPods": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.PodStatus"),
									},
								},
							},
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterCapacityCondition"),
									},
								},
							},
						},
					},
					"reports": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterCapacityReport"),
									},
								},
							},
						},
					},
				},
				Required: []string{"name", "availableReplicas", "achievedPercent"},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterCapacityCondition", "github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterCapacityReport", "github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.PodStatus"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_ClusterCapacityTarget(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"percent": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"totalReplicaCount": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
				},
				Required: []string{"name", "percent", "totalReplicaCount"},
			},
		},
	}
}

func schema_pkg_apis_shipper_v1alpha1_ClusterInstallationCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_ClusterInstallationStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterInstallationCondition"),
									},
								},
							},
						},
					},
				},
				Required: []string{"name", "status"},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterInstallationCondition"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_ClusterList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.Cluster"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.Cluster", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_ClusterRequirements(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"regions": {
						SchemaProps: spec.SchemaProps{
							Description: "it is an error to not specify any regions",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.RegionRequirement"),
									},
								},
							},
						},
					},
					"capabilities": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"regions"},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.RegionRequirement"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_ClusterSchedulerSettings(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"unschedulable": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"weight": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"identity": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"unschedulable"},
			},
		},
	}
}

func schema_pkg_apis_shipper_v1alpha1_ClusterSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"capabilities": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"apiMaster": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"scheduler": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterSchedulerSettings"),
						},
					},
				},
				Required: []string{"capabilities", "region", "apiMaster", "scheduler"},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterSchedulerSettings"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_ClusterStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NOTE(btyler) when we introduce capacity based scheduling, the capacity can be collected by a cluster controller and stored in cluster.status",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"inService": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
				},
				Required: []string{"inService"},
			},
		},
	}
}

func schema_pkg_apis_shipper_v1alpha1_ClusterTrafficCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_ClusterTrafficStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"achievedTraffic": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int64",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterTrafficCondition"),
									},
								},
							},
						},
					},
				},
				Required: []string{"name", "achievedTraffic", "status", "conditions"},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterTrafficCondition"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_ClusterTrafficTarget(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"weight": {
						SchemaProps: spec.SchemaProps{
							Description: "apimachinery intstr for percentages?",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
				},
				Required: []string{"name", "weight"},
			},
		},
	}
}

func schema_pkg_apis_shipper_v1alpha1_InstallationTarget(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "An InstallationTarget defines the goal state for # of pods for incumbent and contender versions. This is used by the StrategyController to change the state of the cluster to satisfy a single step of a Strategy.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.InstallationTargetSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.InstallationTargetStatus"),
						},
					},
				},
				Required: []string{"spec"},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.InstallationTargetSpec", "github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.InstallationTargetStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_InstallationTargetList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.InstallationTarget"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.InstallationTarget", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_InstallationTargetSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"clusters": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"canOverride": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"chart": {
						SchemaProps: spec.SchemaProps{
							Description: "XXX these are nullable because of migration",
							Ref:         ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.Chart"),
						},
					},
					"values": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"object"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"clusters", "canOverride", "chart"},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.Chart"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_InstallationTargetStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"clusters": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterInstallationStatus"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterInstallationStatus"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_PodStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"containers": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.ContainerStatus"),
									},
								},
							},
						},
					},
					"initContainers": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.ContainerStatus"),
									},
								},
							},
						},
					},
					"condition": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.PodCondition"),
						},
					},
				},
				Required: []string{"name", "containers", "initContainers", "condition"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.ContainerStatus", "k8s.io/api/core/v1.PodCondition"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_RegionRequirement(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
				},
				Required: []string{"name"},
			},
		},
	}
}

func schema_pkg_apis_shipper_v1alpha1_Release(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "A Release is the  defines the goal state for # of pods for incumbent and contender versions. This is used by the StrategyController to change the state of the cluster to satisfy a single step of a Strategy.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ReleaseSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ReleaseStatus"),
						},
					},
				},
				Required: []string{"spec", "status"},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ReleaseSpec", "github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ReleaseStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_ReleaseCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_ReleaseEnvironment(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"chart": {
						SchemaProps: spec.SchemaProps{
							Description: "Chart spec: name, version, repoURL",
							Ref:         ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.Chart"),
						},
					},
					"values": {
						SchemaProps: spec.SchemaProps{
							Description: "the inlined \"values.yaml\" to apply to the chart when rendering it XXX pointer here means it's null-able, do we want that?",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"object"},
										Format: "",
									},
								},
							},
						},
					},
					"clusterRequirements": {
						SchemaProps: spec.SchemaProps{
							Description: "requirements for target clusters for the deployment",
							Ref:         ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterRequirements"),
						},
					},
					"strategy": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.RolloutStrategy"),
						},
					},
				},
				Required: []string{"chart", "values", "clusterRequirements"},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.Chart", "github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterRequirements", "github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.RolloutStrategy"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_ReleaseList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.Release"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.Release", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_ReleaseSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"targetStep": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"environment": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ReleaseEnvironment"),
						},
					},
				},
				Required: []string{"targetStep", "environment"},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ReleaseEnvironment"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_ReleaseStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "this will likely grow into a struct with interesting fields",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"achievedStep": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.AchievedStep"),
						},
					},
					"strategy": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ReleaseStrategyStatus"),
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ReleaseCondition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.AchievedStep", "github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ReleaseCondition", "github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ReleaseStrategyStatus"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_ReleaseStrategyCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"step": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_ReleaseStrategyState(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"waitingForInstallation": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"waitingForCapacity": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"waitingForTraffic": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"waitingForCommand": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"waitingForInstallation", "waitingForCapacity", "waitingForTraffic", "waitingForCommand"},
			},
		},
	}
}

func schema_pkg_apis_shipper_v1alpha1_ReleaseStrategyStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"state": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ReleaseStrategyState"),
						},
					},
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ReleaseStrategyCondition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ReleaseStrategyCondition", "github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ReleaseStrategyState"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_RolloutBlock(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "A RolloutBlock defines the a state where rollouts are blocked, locally or globally. This is used by the ApplicationController to disable rollouts.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.RolloutBlockSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.RolloutBlockStatus"),
						},
					},
				},
				Required: []string{"spec", "status"},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.RolloutBlockSpec", "github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.RolloutBlockStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_RolloutBlockAuthor(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"type", "name"},
			},
		},
	}
}

func schema_pkg_apis_shipper_v1alpha1_RolloutBlockList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.RolloutBlock"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.RolloutBlock", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_RolloutBlockOverrides(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"application": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"release": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"application", "release"},
			},
		},
	}
}

func schema_pkg_apis_shipper_v1alpha1_RolloutBlockSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"message": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"author": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.RolloutBlockAuthor"),
						},
					},
				},
				Required: []string{"message", "author"},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.RolloutBlockAuthor"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_RolloutBlockStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"overrides": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.RolloutBlockOverrides"),
						},
					},
				},
				Required: []string{"overrides"},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.RolloutBlockOverrides"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_RolloutStrategy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"steps": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.RolloutStrategyStep"),
									},
								},
							},
						},
					},
				},
				Required: []string{"steps"},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.RolloutStrategyStep"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_RolloutStrategyStep(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"capacity": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.RolloutStrategyStepValue"),
						},
					},
					"traffic": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.RolloutStrategyStepValue"),
						},
					},
				},
				Required: []string{"name", "capacity", "traffic"},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.RolloutStrategyStepValue"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_RolloutStrategyStepValue(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"incumbent": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
					"contender": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
				},
				Required: []string{"incumbent", "contender"},
			},
		},
	}
}

func schema_pkg_apis_shipper_v1alpha1_TrafficTarget(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "A TrafficTarget defines the goal state for traffic split between incumbent and contender versions. This is used by the StrategyController to change the state of the service mesh to satisfy a single step of a Strategy.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.TrafficTargetSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.TrafficTargetStatus"),
						},
					},
				},
				Required: []string{"spec"},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.TrafficTargetSpec", "github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.TrafficTargetStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_TrafficTargetList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.TrafficTarget"),
									},
								},
							},
						},
					},
				},
				Required: []string{"metadata", "items"},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.TrafficTarget", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_TrafficTargetSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"clusters": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterTrafficTarget"),
									},
								},
							},
						},
					},
				},
				Required: []string{"clusters"},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterTrafficTarget"},
	}
}

func schema_pkg_apis_shipper_v1alpha1_TrafficTargetStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"clusters": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterTrafficStatus"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1.ClusterTrafficStatus"},
	}
}
