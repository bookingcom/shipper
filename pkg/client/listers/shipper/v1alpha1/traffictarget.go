// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/bookingcom/shipper/pkg/apis/shipper/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TrafficTargetLister helps list TrafficTargets.
type TrafficTargetLister interface {
	// List lists all TrafficTargets in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.TrafficTarget, err error)
	// TrafficTargets returns an object that can list and get TrafficTargets.
	TrafficTargets(namespace string) TrafficTargetNamespaceLister
	TrafficTargetListerExpansion
}

// trafficTargetLister implements the TrafficTargetLister interface.
type trafficTargetLister struct {
	indexer cache.Indexer
}

// NewTrafficTargetLister returns a new TrafficTargetLister.
func NewTrafficTargetLister(indexer cache.Indexer) TrafficTargetLister {
	return &trafficTargetLister{indexer: indexer}
}

// List lists all TrafficTargets in the indexer.
func (s *trafficTargetLister) List(selector labels.Selector) (ret []*v1alpha1.TrafficTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TrafficTarget))
	})
	return ret, err
}

// TrafficTargets returns an object that can list and get TrafficTargets.
func (s *trafficTargetLister) TrafficTargets(namespace string) TrafficTargetNamespaceLister {
	return trafficTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TrafficTargetNamespaceLister helps list and get TrafficTargets.
type TrafficTargetNamespaceLister interface {
	// List lists all TrafficTargets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.TrafficTarget, err error)
	// Get retrieves the TrafficTarget from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.TrafficTarget, error)
	TrafficTargetNamespaceListerExpansion
}

// trafficTargetNamespaceLister implements the TrafficTargetNamespaceLister
// interface.
type trafficTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TrafficTargets in the indexer for a given namespace.
func (s trafficTargetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TrafficTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TrafficTarget))
	})
	return ret, err
}

// Get retrieves the TrafficTarget from the indexer for a given namespace and name.
func (s trafficTargetNamespaceLister) Get(name string) (*v1alpha1.TrafficTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("traffictarget"), name)
	}
	return obj.(*v1alpha1.TrafficTarget), nil
}
